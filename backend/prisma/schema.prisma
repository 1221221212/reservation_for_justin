generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ユーザー権限（認可用）
enum Role {
  OWNER
  MANAGER
  STAFF
}

/// 店舗ステータス
enum StoreStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

/// ユーザーのステータス
enum UserStatus {
  ACTIVE
  INACTIVE
}

/// 座席属性／グループ用ステータス
enum AttributeStatus {
  ACTIVE
  INACTIVE
}

/// 属性グループ選択タイプ
enum SelectionType {
  SINGLE
  MULTIPLE
}

/// 座席用ステータス
enum SeatStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

/// レイアウト用ステータス
enum LayoutStatus {
  ACTIVE
  INACTIVE
}

/// 定期休業タイプ
enum ClosedDayType {
  WEEKLY           // 毎週 X 曜日
  MONTHLY_DATE     // 毎月 X 日
  MONTHLY_NTH_WEEK // 毎月第 N X 曜日
}

/// 特別営業日／休業日タイプ
enum SpecialDayType {
  BUSINESS  // 特別営業日
  CLOSED    // 特別休業日
}

/// 予約ステータス
enum ReservationStatus {
  BOOKED
  CANCELLED
  NOSHOW
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SpecialScheduleType {
  OPEN
  CLOSED
}

/// 店舗テーブル
model Store {
  id                   BigInt                  @id @default(autoincrement())
  name                 String
  status               StoreStatus             @default(ACTIVE)
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @updatedAt     @map("updated_at")

  users                UserAccount[]           @relation("Store_to_Users")
  seatAttributeGroups  SeatAttributeGroup[]    @relation("Store_to_SeatAttributeGroups")
  seatAttributes       SeatAttribute[]         @relation("Store_to_SeatAttributes")
  seats                Seat[]                  @relation("Store_to_Seats")
  layouts              Layout[]                @relation("Store_to_Layouts")
  layoutScheduleGroups LayoutScheduleGroup[]   @relation("Store_to_LayoutScheduleGroups")
  closedDayGroups      ClosedDayGroup[]        @relation("storeClosedDays")
  specialDays          SpecialDay[]            @relation("storeSpecialDays")
  reservations         Reservation[]           @relation("Store_to_Reservations")
  courses              Course[]                @relation("Store_to_Courses")
  reservationSettings  ReservationSettings?    @relation("Store_to_ReservationSettings")

  @@map("store")
}

/// ユーザーアカウントテーブル
model UserAccount {
  id           BigInt     @id @default(autoincrement())
  storeId      BigInt?    @map("store_id")
  role         Role
  userId       String     @map("user_id") @unique
  username     String
  passwordHash String     @map("password_hash")
  status       UserStatus @default(ACTIVE) @map("status")
  isLocked     Boolean    @default(false)    @map("is_locked")
  createdAt    DateTime   @default(now())     @map("created_at")
  updatedAt    DateTime   @updatedAt         @map("updated_at")

  store        Store?     @relation("Store_to_Users", fields: [storeId], references: [id])

  @@map("user_account")
}

/// 座席属性グループ
model SeatAttributeGroup {
  id             BigInt              @id @default(autoincrement())
  storeId        BigInt
  name           String              @db.VarChar(100)
  selectionType  SelectionType
  status         AttributeStatus     @default(ACTIVE)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  store          Store               @relation("Store_to_SeatAttributeGroups", fields: [storeId], references: [id])
  attributes     SeatAttribute[]     @relation("Group_to_Attributes")

  @@unique([storeId, name])
  @@map("seat_attribute_group")
}

/// 座席属性
model SeatAttribute {
  id           BigInt                     @id @default(autoincrement())
  storeId      BigInt
  groupId      BigInt
  name         String                     @db.VarChar(100)
  status       AttributeStatus            @default(ACTIVE)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt

  store        Store                      @relation("Store_to_SeatAttributes", fields: [storeId], references: [id])
  group        SeatAttributeGroup         @relation("Group_to_Attributes", fields: [groupId], references: [id])
  assignments  SeatAttributeAssignment[]  @relation("Attribute_to_SeatAssignments")

  @@unique([storeId, groupId, name])
  @@map("seat_attribute")
}

/// 中間テーブル: 座席⇔属性の割り当て
model SeatAttributeAssignment {
  seatId      BigInt
  attributeId BigInt
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  seat        Seat          @relation(
                  name: "Seat_to_AttributeAssignments",
                  fields: [seatId],
                  references: [id]
                )
  attribute   SeatAttribute @relation(
                  name: "Attribute_to_SeatAssignments",
                  fields: [attributeId],
                  references: [id]
                )

  @@id([seatId, attributeId])
  @@map("seat_attribute_assignment")
}

/// 座席テーブル
model Seat {
  id          BigInt                       @id @default(autoincrement())
  storeId     BigInt
  name        String                       @db.VarChar(50)
  minCapacity Int                          @default(1)
  maxCapacity Int                          @default(1)
  status      SeatStatus                   @default(ACTIVE)
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt

  store       Store                        @relation("Store_to_Seats", fields: [storeId], references: [id])
  attributes  SeatAttributeAssignment[]    @relation("Seat_to_AttributeAssignments")
  layouts     LayoutSeat[]                 @relation("Seat_to_Layouts")

  @@unique([storeId, name])
  @@map("seat")
}

/// レイアウト
model Layout {
  id         BigInt         @id @default(autoincrement())
  storeId    BigInt
  name       String         @db.VarChar(100)
  status     LayoutStatus   @default(ACTIVE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  store      Store          @relation("Store_to_Layouts", fields: [storeId], references: [id])
  seats      LayoutSeat[]   @relation("Layout_to_Seats")
  schedules  LayoutSchedule[]
  specialDaySchedules SpecialDaySchedule[] @relation("SpecialDay_to_LayoutSchedules")

  @@unique([storeId, name])
  @@map("layout")
}

/// レイアウト⇔座席 の中間テーブル
model LayoutSeat {
  layoutId   BigInt
  seatId     BigInt
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  layout     Layout  @relation(
                 name: "Layout_to_Seats",
                 fields: [layoutId],
                 references: [id]
               )
  seat       Seat    @relation(
                 name: "Seat_to_Layouts",
                 fields: [seatId],
                 references: [id]
               )

  @@id([layoutId, seatId])
  @@map("layout_seat")
}

/// 週スケジュール切替用グループ
model LayoutScheduleGroup {
  id             BigInt             @id @default(autoincrement())
  storeId        BigInt
  name           String             @db.VarChar(100)
  status         LayoutStatus       @default(ACTIVE)
  effectiveFrom  DateTime           @map("effective_from")
  applyOnHoliday Boolean            @default(false)
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt     @map("updated_at")

  store          Store              @relation("Store_to_LayoutScheduleGroups", fields: [storeId], references: [id])
  schedules      LayoutSchedule[]   @relation("Group_to_LayoutSchedules")

  @@unique([storeId, name])
  @@unique([storeId, effectiveFrom])
  @@map("layout_schedule_group")
}

/// レイアウト割当：曜日・時間帯ごと
model LayoutSchedule {
  id         BigInt              @id @default(autoincrement())
  groupId    BigInt
  layoutId   BigInt
  dayOfWeek  Int                  // 0(日)〜6(土)、7=祝日
  startTime  DateTime   @db.Time  @map("start_time")
  endTime    DateTime?  @db.Time  @map("end_time")
  status     LayoutStatus        @default(ACTIVE)
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt     @map("updated_at")

  group      LayoutScheduleGroup @relation(
                 name: "Group_to_LayoutSchedules",
                 fields: [groupId],
                 references: [id]
               )
  layout     Layout              @relation(
                 name: "Layout_to_LayoutSchedules",
                 fields: [layoutId],
                 references: [id]
               )

  @@index([groupId, dayOfWeek])  
  @@index([groupId, dayOfWeek, startTime])
  @@map("layout_schedule")
}

/// 定期休業グループ（有効開始日で識別、同一店舗で重複不可）
model ClosedDayGroup {
  id             BigInt         @id @default(autoincrement())
  storeId        BigInt
  effectiveFrom  DateTime       @map("effective_from")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt     @map("updated_at")

  store          Store          @relation("storeClosedDays", fields: [storeId], references: [id])
  rules          ClosedDay[]    @relation("Group_to_ClosedDays")

  @@unique([storeId, effectiveFrom])
  @@map("closed_day_group")
}

/// 定期休業ルール（週次／月次）
model ClosedDay {
  id          BigInt           @id @default(autoincrement())
  groupId     BigInt
  type        ClosedDayType    // WEEKLY / MONTHLY_DATE / MONTHLY_NTH_WEEK
  dayOfWeek   Int?             // type = WEEKLY or MONTHLY_NTH_WEEK (0=日〜6=土, 7=祝日)
  dayOfMonth  Int?             // type = MONTHLY_DATE (1–31, 99=末日)
  weekOfMonth Int?             // type = MONTHLY_NTH_WEEK (1–5)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt     @map("updated_at")

  group       ClosedDayGroup   @relation(
                 name: "Group_to_ClosedDays",
                 fields: [groupId],
                 references: [id]
               )

  @@map("closed_day")
}

/// 特定の日付の「特別日」を表すモデル
model SpecialDay {
  id        BigInt               @id @default(autoincrement())
  storeId   BigInt
  date      DateTime             @db.Date           // 対象日付（日付のみ）
  type      SpecialDayType                         // BUSINESS or CLOSED
  reason    String?              @db.VarChar(255)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  store     Store                @relation("storeSpecialDays", fields: [storeId], references: [id])
  schedules SpecialDaySchedule[] @relation("Day_to_SpecialSchedules")

  @@unique([storeId, date])
  @@map("special_day")
}

/// 特別営業日の時間帯・レイアウト割当を表すモデル
model SpecialDaySchedule {
  id           BigInt       @id @default(autoincrement())
  specialDayId BigInt
  layoutId     BigInt                            // 適用レイアウト
  startTime    DateTime      @db.Time            // 開始時刻
  endTime      DateTime      @db.Time            // 終了時刻
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  specialDay   SpecialDay   @relation(
                  name: "Day_to_SpecialSchedules",
                  fields: [specialDayId],
                  references: [id]
                )
  layout       Layout       @relation(
                  name: "SpecialSchedule_to_Layout",
                  fields: [layoutId],
                  references: [id]
                )

  @@index([specialDayId])
  @@map("special_day_schedule")
}

/// 祝日テーブル
model Holiday {
  date      DateTime @id @db.Date                   // 祝日日付（日付のみ、主キー）
  createdAt DateTime @default(now()) @map("created_at")

  @@map("holiday")
}

/// 予約テーブル
model Reservation {
  id               BigInt             @id @default(autoincrement())
  reservationCode  String?            @unique @map("reservation_code")
  storeId          BigInt             @map("store_id")
  courseId         BigInt?            @map("course_id")
  numPeople        Int                @map("num_people") @default(1)
  status           ReservationStatus  @default(BOOKED)
  customerName     String             @map("customer_name")
  customerEmail    String             @map("customer_email")
  customerPhone    String?            @map("customer_phone")
  customerMemo     String?            @map("customer_memo")
  actionRequired   Boolean            @map("action_required") @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt         @map("updated_at")

  reservationSeats ReservationSeat[]  @relation("Reservation_to_Seats")
  store            Store              @relation("Store_to_Reservations", fields: [storeId], references: [id])
  course           Course?            @relation("Course_to_Reservations", fields: [courseId], references: [id])

  @@map("reservation")
}

/// 予約×座席（時間帯）テーブル
model ReservationSeat {
  reservation    Reservation @relation(name: "Reservation_to_Seats", fields: [reservationId], references: [id])
  reservationId  BigInt      @map("reservation_id")
  seatId         BigInt      @map("seat_id")
  date           DateTime    @db.Date
  startTime      DateTime    @db.Time   @map("start_time")
  endTime        DateTime    @db.Time   @map("end_time")
  createdAt      DateTime    @default(now())             @map("created_at")
  updatedAt      DateTime    @updatedAt                 @map("updated_at")

  @@id([reservationId, seatId, date, startTime])
  @@index([date, startTime])
  @@map("reservation_seat")
}

/// コース情報
model Course {
  id               BigInt                   @id @default(autoincrement())
  storeId          BigInt                   @map("store_id")
  name             String                   @db.VarChar(100)
  price            Decimal?                 @db.Decimal(10, 2)
  minPeople        Int?                     @map("min_people")
  maxPeople        Int?                     @map("max_people")
  durationMinutes  Int                      @map("duration_minutes")
  description      String?                  @db.Text
  status           CourseStatus             @default(ACTIVE)
  createdAt        DateTime                 @default(now())            @map("created_at")
  updatedAt        DateTime                 @updatedAt                @map("updated_at")

  store            Store                    @relation("Store_to_Courses", fields: [storeId], references: [id])
  images           CourseImage[]            @relation("Course_to_Images")
  scheduleGroup    CourseScheduleGroup?     @relation("Course_to_ScheduleGroup")
  specialGroups    SpecialCourseScheduleGroup[] @relation("Course_to_SpecialCourseGroups")

  @@map("course")
  @@index([storeId])
  @@unique([storeId, name])
}

/// コース画像
model CourseImage {
  id        BigInt   @id @default(autoincrement())
  courseId  BigInt   @map("course_id")
  url       String   @db.VarChar(255)
  sortOrder Int      @default(0)            @map("sort_order")
  createdAt DateTime @default(now())        @map("created_at")
  updatedAt DateTime @updatedAt             @map("updated_at")

  course    Course   @relation(name: "Course_to_Images", fields: [courseId], references: [id])

  @@map("course_image")
  @@index([courseId])
}

/// 定期コーススケジュールグループ
model CourseScheduleGroup {
  id             BigInt   @id @default(autoincrement())
  courseId       BigInt   @map("course_id")
  status         CourseStatus @default(ACTIVE)
  effectiveFrom  DateTime?    @map("effective_from")
  effectiveTo    DateTime?    @map("effective_to")
  applyOnHoliday Boolean       @default(false) @map("apply_on_holiday")
  createdAt      DateTime     @default(now())   @map("created_at")
  updatedAt      DateTime     @updatedAt        @map("updated_at")

  course         Course       @relation(name: "Course_to_ScheduleGroup", fields: [courseId], references: [id])
  schedules      CourseSchedule[] @relation("Group_to_CourseSchedules")

  @@map("course_schedule_group")
  @@unique([courseId])
}

/// 定期スケジュール詳細
model CourseSchedule {
  id        BigInt   @id @default(autoincrement())
  groupId   BigInt   @map("group_id")
  dayOfWeek Int      @map("day_of_week")
  startTime DateTime @db.Time             @map("start_time")
  endTime   DateTime @db.Time             @map("end_time")
  status    CourseStatus @default(ACTIVE)
  createdAt DateTime      @default(now())  @map("created_at")
  updatedAt DateTime      @updatedAt       @map("updated_at")

  group     CourseScheduleGroup @relation(name: "Group_to_CourseSchedules", fields: [groupId], references: [id])

  @@map("course_schedule")
  @@index([groupId, dayOfWeek])
}

/// 特別コーススケジュールグループ
model SpecialCourseScheduleGroup {
  id            BigInt               @id @default(autoincrement())
  courseId      BigInt               @map("course_id")
  date          DateTime             @db.Date
  type          SpecialScheduleType  
  reason        String?              @db.VarChar(255)
  status        CourseStatus         @default(ACTIVE)
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt     @map("updated_at")

  course        Course               @relation( name: "Course_to_SpecialCourseGroups",
                   fields: [courseId],
                   references: [id]
                 )
  specialItems  SpecialCourseSchedule[] @relation("Group_to_SpecialCourseSchedules")

  @@map("special_course_schedule_group")
  @@unique([courseId, date])
}

/// 特別スケジュール詳細
model SpecialCourseSchedule {
  id          BigInt       @id @default(autoincrement())
  groupId     BigInt       @map("group_id")
  startTime   DateTime     @db.Time      @map("start_time")
  endTime     DateTime     @db.Time      @map("end_time")
  status      CourseStatus @default(ACTIVE)
  description String?      @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt     @map("updated_at")

  group       SpecialCourseScheduleGroup @relation(
                   name: "Group_to_SpecialCourseSchedules",
                   fields: [groupId],
                   references: [id]
                 )

  @@map("special_course_schedule")
  @@index([groupId])
}
