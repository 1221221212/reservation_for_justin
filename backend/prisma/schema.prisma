generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ユーザー権限（認可用）
enum Role {
  owner
  manager
  staff
}

/// 店舗ステータス
enum StoreStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

/// ユーザーのステータス
enum UserStatus {
  ACTIVE
  INACTIVE
}

/// 座席属性／グループ用ステータス
enum AttributeStatus {
  active
  inactive
}

/// 属性グループ選択タイプ
enum SelectionType {
  single
  multiple
}

/// 座席用ステータス
enum SeatStatus {
  active
  inactive
  suspended
}

/// レイアウト用ステータス
enum LayoutStatus {
  active
  inactive
}

/// 定期休業タイプ
enum ClosedDayType {
  WEEKLY           // 毎週 X 曜日
  MONTHLY_DATE     // 毎月 X 日
  MONTHLY_NTH_WEEK // 毎月第 N  X 曜日
}

/// 特別営業日／休業日タイプ
enum SpecialDayType {
  BUSINESS  // 特別営業日
  CLOSED    // 特別休業日
}

/// 予約ステータス
enum ReservationStatus {
  booked
  cancelled
  noshow
}

/// 店舗テーブル
model Store {
  id                   BigInt                  @id @default(autoincrement())
  name                 String
  status               StoreStatus             @default(ACTIVE)
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @updatedAt     @map("updated_at")

  users                UserAccount[]
  seatAttributeGroups  SeatAttributeGroup[]
  seatAttributes       SeatAttribute[]
  seats                Seat[]
  layouts              Layout[]
  layoutScheduleGroups LayoutScheduleGroup[]
  closedDayGroups      ClosedDayGroup[]        @relation("storeClosedDays")
  specialDays          SpecialDay[]            @relation("storeSpecialDays")
  reservations         Reservation[]
  reservationSettings  ReservationSettings? 

  @@map("store")
}

/// ユーザーアカウントテーブル
model UserAccount {
  id           BigInt     @id @default(autoincrement())
  storeId      BigInt?    @map("store_id")
  role         Role
  userId       String     @map("user_id") @unique
  username     String
  passwordHash String     @map("password_hash")
  status       UserStatus @default(ACTIVE) @map("status")
  isLocked     Boolean    @default(false)    @map("is_locked")
  createdAt    DateTime   @default(now())     @map("created_at")
  updatedAt    DateTime   @updatedAt         @map("updated_at")

  store        Store?     @relation(fields: [storeId], references: [id])

  @@map("user_account")
}

/// 座席属性グループ
model SeatAttributeGroup {
  id             BigInt                 @id @default(autoincrement())
  storeId        BigInt
  name           String                 @db.VarChar(100)
  selectionType  SelectionType
  status         AttributeStatus        @default(active)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  store          Store                  @relation(fields: [storeId], references: [id])
  attributes     SeatAttribute[]

  @@unique([storeId, name])
  @@map("seat_attribute_group")
}

/// 座席属性
model SeatAttribute {
  id           BigInt                       @id @default(autoincrement())
  storeId      BigInt
  groupId      BigInt
  name         String                       @db.VarChar(100)
  status       AttributeStatus              @default(active)
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt

  store        Store                        @relation(fields: [storeId], references: [id])
  group        SeatAttributeGroup          @relation(fields: [groupId], references: [id])
  assignments  SeatAttributeAssignment[]

  @@unique([storeId, groupId, name])
  @@map("seat_attribute")
}

/// 中間テーブル: 座席⇔属性の割り当て
model SeatAttributeAssignment {
  seatId      BigInt
  attributeId BigInt
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt

  seat        Seat                         @relation(fields: [seatId], references: [id])
  attribute   SeatAttribute                @relation(fields: [attributeId], references: [id])

  @@id([seatId, attributeId])
  @@map("seat_attribute_assignment")
}

/// 座席テーブル
model Seat {
  id          BigInt                       @id @default(autoincrement())
  storeId     BigInt
  name        String                       @db.VarChar(50)
  minCapacity Int                          @default(1)
  maxCapacity Int                          @default(1)
  status      SeatStatus                   @default(active)
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt

  store       Store                        @relation(fields: [storeId], references: [id])
  attributes  SeatAttributeAssignment[]
  layouts     LayoutSeat[]

  @@unique([storeId, name])
  @@map("seat")
}

/// レイアウト
model Layout {
  id         BigInt         @id @default(autoincrement())
  storeId    BigInt
  name       String         @db.VarChar(100)
  status     LayoutStatus   @default(active)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  store      Store          @relation(fields: [storeId], references: [id])
  seats      LayoutSeat[]
  schedules  LayoutSchedule[]
  specialDaySchedules SpecialDaySchedule[] @relation("specialDayOnLayout")

  @@unique([storeId, name])
  @@map("layout")
}

/// レイアウト⇔座席 の中間テーブル
model LayoutSeat {
  layoutId   BigInt
  seatId     BigInt
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  layout     Layout         @relation(fields: [layoutId], references: [id])
  seat       Seat           @relation(fields: [seatId], references: [id])

  @@id([layoutId, seatId])
  @@map("layout_seat")
}

/// 週スケジュール切替用グループ
model LayoutScheduleGroup {
  id             BigInt               @id @default(autoincrement())
  storeId        BigInt
  name           String               @db.VarChar(100)
  status         LayoutStatus         @default(active)
  effectiveFrom  DateTime             @map("effective_from")
  applyOnHoliday Boolean              @default(false)
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt     @map("updated_at")

  store          Store                @relation(fields: [storeId], references: [id])
  schedules      LayoutSchedule[]

  @@unique([storeId, name])
  @@unique([storeId, effectiveFrom])
  @@map("layout_schedule_group")
}

/// レイアウト割当：曜日・時間帯ごと
model LayoutSchedule {
  id         BigInt             @id @default(autoincrement())
  groupId    BigInt
  layoutId   BigInt
  dayOfWeek  Int                 // 0(日)〜6(土)、7=祝日
  startTime  DateTime   @db.Time  @map("start_time")
  endTime    DateTime?  @db.Time  @map("end_time")
  status     LayoutStatus       @default(active)
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt     @map("updated_at")

  group      LayoutScheduleGroup @relation(fields: [groupId], references: [id])
  layout     Layout              @relation(fields: [layoutId], references: [id])

  @@index([groupId, dayOfWeek])
  @@map("layout_schedule")
}

/// 定期休業グループ（有効開始日で識別、同一店舗で重複不可）
model ClosedDayGroup {
  id             BigInt         @id @default(autoincrement())
  storeId        BigInt
  effectiveFrom  DateTime       @map("effective_from")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt     @map("updated_at")

  store          Store          @relation("storeClosedDays", fields: [storeId], references: [id])
  rules          ClosedDay[]    @relation("groupRules")

  @@unique([storeId, effectiveFrom])
  @@map("closed_day_group")
}

/// 定期休業ルール（週次／月次）
model ClosedDay {
  id          BigInt           @id @default(autoincrement())
  groupId     BigInt
  type        ClosedDayType    // WEEKLY / MONTHLY_DATE / MONTHLY_NTH_WEEK
  dayOfWeek   Int?             // type = WEEKLY or MONTHLY_NTH_WEEK (0=日〜6=土, 7=祝日)
  dayOfMonth  Int?             // type = MONTHLY_DATE (1–31, 99=末日)
  weekOfMonth Int?             // type = MONTHLY_NTH_WEEK (1–5)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt     @map("updated_at")

  group       ClosedDayGroup   @relation(fields: [groupId], references: [id], name: "groupRules")

  @@map("closed_day")
}

/// 特定の日付の「特別日」を表すモデル
model SpecialDay {
  id        BigInt          @id @default(autoincrement())
  storeId   BigInt
  date      DateTime        @db.Date           // 対象日付（日付のみ）
  type      SpecialDayType                     // BUSINESS or CLOSED
  reason    String?        @db.VarChar(255)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  store     Store           @relation(fields: [storeId], references: [id], name: "storeSpecialDays")
  schedules SpecialDaySchedule[] @relation("specialDaySchedules")

  @@unique([storeId, date])
  @@map("special_day")
}

/// 特別営業日の時間帯・レイアウト割当を表すモデル
model SpecialDaySchedule {
  id           BigInt       @id @default(autoincrement())
  specialDayId BigInt
  layoutId     BigInt                            // 適用レイアウト
  startTime    DateTime      @db.Time            // 開始時刻
  endTime      DateTime      @db.Time            // 終了時刻
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  specialDay   SpecialDay   @relation("specialDaySchedules", fields: [specialDayId], references: [id])
  layout       Layout       @relation("specialDayOnLayout", fields: [layoutId], references: [id])

  @@index([specialDayId])
  @@map("special_day_schedule")
}

/// 祝日テーブル
model Holiday {
  date      DateTime @id @db.Date                   // 祝日日付（日付のみ、主キー）
  createdAt DateTime @default(now()) @map("created_at")

  @@map("holiday")
}

/// 予約テーブル
model Reservation {
  id               BigInt             @id @default(autoincrement())
  storeId          BigInt             @map("store_id")
  courseId         BigInt?            @map("course_id")
  numPeople        Int                @map("num_people") @default(1)
  status           ReservationStatus  @default(booked)
  customerName     String             @map("customer_name")
  customerEmail    String             @map("customer_email")
  customerPhone    String?            @map("customer_phone")
  customerMemo     String?            @map("customer_memo")
  actionRequired   Boolean            @map("action_required") @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt         @map("updated_at")

  reservationSeats ReservationSeat[]

  store            Store              @relation(fields: [storeId], references: [id])

  @@map("reservation")
}

/// 予約×座席（時間帯）テーブル
model ReservationSeat {
  reservation    Reservation @relation(fields: [reservationId], references: [id])
  reservationId  BigInt      @map("reservation_id")
  seatId         BigInt      @map("seat_id")
  date           DateTime    @db.Date
  startTime      DateTime    @db.Time   @map("start_time")
  endTime        DateTime    @db.Time   @map("end_time")
  createdAt      DateTime    @default(now())             @map("created_at")
  updatedAt      DateTime    @updatedAt                 @map("updated_at")

  @@id([reservationId, seatId, date, startTime])
  @@map("reservation_seat")
}

model ReservationSettings {
  id                         BigInt   @id @default(autoincrement())
  storeId                    BigInt   @unique
  gridUnit                   Int      @default(15)   // 予約枠の刻み（分）
  standardReservationMinutes Int      @default(60)   // 標準予約時間（分）

  // 予約枠開放と締切をまとめた JSON
  bookingWindow              Json     @default("{}") 
  /*
    例:
    {
      "open":  { "mode":"rolling", "daysBefore":30 },
      "close": { "mode":"absolute", "daysBefore":1 }
    }
  */

  bufferTime                 Int      @default(0)    // バッファタイム（分）

  allowCourseSelection       Boolean  @default(false)
  allowSeatSelection         Boolean  @default(false)

  allowSeatCombination       Boolean  @default(false)
  minCombinationPartySize    Int?                    // optional
  maxCombinationSeats        Int?                    // optional

  // キャンセル・変更ポリシーも JSON でまとめて管理
  cancellationPolicy         Json?    @default("{}") 
  /*
    例:
    {
      "enabled": true,
      "deadlineBefore": { "hoursBeforeStart":1 }
    }
  */
  modificationPolicy         Json?    @default("{}")
  /*
    例:
    {
      "enabled": true,
      "deadlineBefore": { "hoursBeforeStart":2 }
    }
  */

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  store                      Store    @relation(fields: [storeId], references: [id])

  @@map("reservation_settings")
}
